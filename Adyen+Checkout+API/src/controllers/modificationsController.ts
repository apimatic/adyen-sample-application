/**
 * Adyen Checkout APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ServiceError } from '../errors/serviceError';
import {
  CreatePaymentAmountUpdateRequest,
  createPaymentAmountUpdateRequestSchema,
} from '../models/createPaymentAmountUpdateRequest';
import {
  CreatePaymentCancelRequest,
  createPaymentCancelRequestSchema,
} from '../models/createPaymentCancelRequest';
import {
  CreatePaymentCaptureRequest,
  createPaymentCaptureRequestSchema,
} from '../models/createPaymentCaptureRequest';
import {
  CreatePaymentRefundRequest,
  createPaymentRefundRequestSchema,
} from '../models/createPaymentRefundRequest';
import {
  CreatePaymentReversalRequest,
  createPaymentReversalRequestSchema,
} from '../models/createPaymentReversalRequest';
import {
  CreateStandalonePaymentCancelRequest,
  createStandalonePaymentCancelRequestSchema,
} from '../models/createStandalonePaymentCancelRequest';
import {
  PaymentAmountUpdateResource,
  paymentAmountUpdateResourceSchema,
} from '../models/paymentAmountUpdateResource';
import {
  PaymentCancelResource,
  paymentCancelResourceSchema,
} from '../models/paymentCancelResource';
import {
  PaymentCaptureResource,
  paymentCaptureResourceSchema,
} from '../models/paymentCaptureResource';
import {
  PaymentRefundResource,
  paymentRefundResourceSchema,
} from '../models/paymentRefundResource';
import {
  PaymentReversalResource,
  paymentReversalResourceSchema,
} from '../models/paymentReversalResource';
import {
  StandalonePaymentCancelResource,
  standalonePaymentCancelResourceSchema,
} from '../models/standalonePaymentCancelResource';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ModificationsController extends BaseController {
  /**
   * Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a
   * unique reference for this request. You get the outcome of the request asynchronously, in a
   * [**TECHNICAL_CANCEL** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).
   *
   * If you want to cancel a payment using the [`pspReference`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments__resParam_pspReference), use the
   * [`/payments/{paymentPspReference}/cancels`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) endpoint instead.
   *
   * If you want to cancel a payment but are not sure whether it has been captured, use the
   * [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.
   *
   * For more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel).
   *
   * @param idempotencyKey  A unique identifier for the message with a
   *                                                                       maximum of 64 characters (we recommend a
   *                                                                       UUID).
   * @param body
   * @return Response from the API call
   */
  async postCancels(
    idempotencyKey?: string,
    body?: CreateStandalonePaymentCancelRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StandalonePaymentCancelResource>> {
    const req = this.createRequest('POST', '/cancels');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createStandalonePaymentCancelRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(
      standalonePaymentCancelResourceSchema,
      requestOptions
    );
  }

  /**
   * Increases or decreases the authorised payment amount and returns a unique reference for this request.
   * You get the outcome of the request asynchronously, in an [**AUTHORISATION_ADJUSTMENT**
   * webhook](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes).
   *
   * You can only update authorised amounts that have not yet been [captured](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures).
   *
   * The amount you specify in the request is the updated amount, which is larger or smaller than the
   * initial authorised amount.
   *
   * For more information, refer to [Authorisation adjustment](https://docs.adyen.com/online-
   * payments/adjust-authorisation#use-cases).
   *
   * @param paymentPspReference The [`pspReference`](https://docs.adyen.
   *                                                                       com/api-
   *                                                                       explorer/#/CheckoutService/latest/post/payme
   *                                                                       nts__resParam_pspReference) of the payment.
   * @param idempotencyKey      A unique identifier for the message with a
   *                                                                       maximum of 64 characters (we recommend a
   *                                                                       UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsPaymentPspReferenceAmountUpdates(
    paymentPspReference: string,
    idempotencyKey?: string,
    body?: CreatePaymentAmountUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentAmountUpdateResource>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      paymentPspReference: [paymentPspReference, string()],
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createPaymentAmountUpdateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.paymentPspReference}/amountUpdates`;
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentAmountUpdateResourceSchema, requestOptions);
  }

  /**
   * Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/paymentPspReference/captures), and returns a unique
   * reference for this request. You get the outcome of the request asynchronously, in a
   * [**CANCELLATION** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).
   *
   * If you want to cancel a payment but don't have the [`pspReference`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments__resParam_pspReference), use the [`/cancels`](https:
   * //docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cancels) endpoint instead.
   *
   * If you want to cancel a payment but are not sure whether it has been captured, use the
   * [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.
   *
   * For more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel).
   *
   * @param paymentPspReference The [`pspReference`](https://docs.adyen.com/api-
   *                                                                 explorer/#/CheckoutService/latest/post/payments__r
   *                                                                 esParam_pspReference) of the payment that you want
   *                                                                 to cancel.
   * @param idempotencyKey      A unique identifier for the message with a
   *                                                                 maximum of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsPaymentPspReferenceCancels(
    paymentPspReference: string,
    idempotencyKey?: string,
    body?: CreatePaymentCancelRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentCancelResource>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      paymentPspReference: [paymentPspReference, string()],
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createPaymentCancelRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.paymentPspReference}/cancels`;
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentCancelResourceSchema, requestOptions);
  }

  /**
   * Captures an authorised payment and returns a unique reference for this request. You get the outcome
   * of the request asynchronously, in a [**CAPTURE** webhook](https://docs.adyen.com/online-
   * payments/capture#capture-notification).
   *
   * You can capture either the full authorised amount or a part of the authorised amount. By default,
   * any unclaimed amount after a partial capture gets cancelled. This does not apply if you enabled
   * multiple partial captures on your account and the payment method supports multiple partial captures.
   *
   * [Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture) is the default
   * setting for most payment methods. In these cases, you don't need to make capture requests. However,
   * making capture requests for payments that are captured automatically does not result in double
   * charges.
   *
   * For more information, refer to [Capture](https://docs.adyen.com/online-payments/capture).
   *
   * @param paymentPspReference The [`pspReference`](https://docs.adyen.com/api-
   *                                                                  explorer/#/CheckoutService/latest/post/payments__
   *                                                                  resParam_pspReference) of the payment that you
   *                                                                  want to capture.
   * @param idempotencyKey      A unique identifier for the message with a
   *                                                                  maximum of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsPaymentPspReferenceCaptures(
    paymentPspReference: string,
    idempotencyKey?: string,
    body?: CreatePaymentCaptureRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentCaptureResource>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      paymentPspReference: [paymentPspReference, string()],
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createPaymentCaptureRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.paymentPspReference}/captures`;
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentCaptureResourceSchema, requestOptions);
  }

  /**
   * Refunds a payment that has been [captured](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a
   * unique reference for this request. You get the outcome of the request asynchronously, in a
   * [**REFUND** webhook](https://docs.adyen.com/online-payments/refund#refund-webhook).
   *
   * You can refund either the full captured amount or a part of the captured amount. You can also
   * perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.
   *
   * > Some payment methods do not support partial refunds. To learn if a payment method supports partial
   * refunds, refer to the payment method page such as [cards](https://docs.adyen.com/payment-
   * methods/cards#supported-cards), [iDEAL](https://docs.adyen.com/payment-methods/ideal), or
   * [Klarna](https://docs.adyen.com/payment-methods/klarna).
   *
   * If you want to refund a payment but are not sure whether it has been captured, use the
   * [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.
   *
   * For more information, refer to [Refund](https://docs.adyen.com/online-payments/refund).
   *
   * @param paymentPspReference The [`pspReference`](https://docs.adyen.com/api-
   *                                                                 explorer/#/CheckoutService/latest/post/payments__r
   *                                                                 esParam_pspReference) of the payment that you want
   *                                                                 to refund.
   * @param idempotencyKey      A unique identifier for the message with a
   *                                                                 maximum of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsPaymentPspReferenceRefunds(
    paymentPspReference: string,
    idempotencyKey?: string,
    body?: CreatePaymentRefundRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentRefundResource>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      paymentPspReference: [paymentPspReference, string()],
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createPaymentRefundRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.paymentPspReference}/refunds`;
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentRefundResourceSchema, requestOptions);
  }

  /**
   * [Refunds](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/refunds) a payment if it has
   * already been captured, and [cancels](https://docs.adyen.com/api-
   * explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) a payment if it has
   * not yet been captured. Returns a unique reference for this request. You get the outcome of the
   * request asynchronously, in a [**CANCEL_OR_REFUND** webhook](https://docs.adyen.com/online-
   * payments/reverse#cancel-or-refund-webhook).
   *
   * The reversed amount is always the full payment amount.
   * > Do not use this request for payments that involve multiple partial captures.
   *
   * For more information, refer to [Reversal](https://docs.adyen.com/online-payments/reversal).
   *
   * @param paymentPspReference The [`pspReference`](https://docs.adyen.com/api-
   *                                                                   explorer/#/CheckoutService/latest/post/payments_
   *                                                                   _resParam_pspReference) of the payment that you
   *                                                                   want to reverse.
   * @param idempotencyKey      A unique identifier for the message with a
   *                                                                   maximum of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsPaymentPspReferenceReversals(
    paymentPspReference: string,
    idempotencyKey?: string,
    body?: CreatePaymentReversalRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentReversalResource>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      paymentPspReference: [paymentPspReference, string()],
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createPaymentReversalRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.paymentPspReference}/reversals`;
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentReversalResourceSchema, requestOptions);
  }
}
