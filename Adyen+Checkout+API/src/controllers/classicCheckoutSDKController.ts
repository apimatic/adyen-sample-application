/**
 * Adyen Checkout APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ServiceError } from '../errors/serviceError';
import {
  PaymentSetupRequest,
  paymentSetupRequestSchema,
} from '../models/paymentSetupRequest';
import {
  PaymentSetupResponse,
  paymentSetupResponseSchema,
} from '../models/paymentSetupResponse';
import {
  PaymentVerificationRequest,
  paymentVerificationRequestSchema,
} from '../models/paymentVerificationRequest';
import {
  PaymentVerificationResponse,
  paymentVerificationResponseSchema,
} from '../models/paymentVerificationResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ClassicCheckoutSDKController extends BaseController {
  /**
   * Provides the data object that can be used to start the Checkout SDK. To set up the payment, pass its
   * amount, currency, and other required parameters. We use this to optimise the payment flow and
   * perform better risk assessment of the transaction.
   *
   * For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks).
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum of 64
   *                                                      characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentSession(
    idempotencyKey?: string,
    body?: PaymentSetupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentSetupResponse>> {
    const req = this.createRequest('POST', '/paymentSession');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(paymentSetupRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentSetupResponseSchema, requestOptions);
  }

  /**
   * Verifies the payment result using the payload returned from the Checkout SDK.
   *
   * For more information, refer to [How it works](https://docs.adyen.com/online-payments#howitworks).
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum of
   *                                                             64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentsResult(
    idempotencyKey?: string,
    body?: PaymentVerificationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymentVerificationResponse>> {
    const req = this.createRequest('POST', '/payments/result');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(paymentVerificationRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(paymentVerificationResponseSchema, requestOptions);
  }
}
