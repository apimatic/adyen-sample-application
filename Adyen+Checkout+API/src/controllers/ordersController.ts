/**
 * Adyen Checkout APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ServiceError } from '../errors/serviceError';
import {
  CheckoutBalanceCheckRequest,
  checkoutBalanceCheckRequestSchema,
} from '../models/checkoutBalanceCheckRequest';
import {
  CheckoutBalanceCheckResponse,
  checkoutBalanceCheckResponseSchema,
} from '../models/checkoutBalanceCheckResponse';
import {
  CheckoutCancelOrderRequest,
  checkoutCancelOrderRequestSchema,
} from '../models/checkoutCancelOrderRequest';
import {
  CheckoutCancelOrderResponse,
  checkoutCancelOrderResponseSchema,
} from '../models/checkoutCancelOrderResponse';
import {
  CheckoutCreateOrderRequest,
  checkoutCreateOrderRequestSchema,
} from '../models/checkoutCreateOrderRequest';
import {
  CheckoutCreateOrderResponse,
  checkoutCreateOrderResponseSchema,
} from '../models/checkoutCreateOrderResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class OrdersController extends BaseController {
  /**
   * Creates an order to be used for partial payments. Make a POST `/orders` call before making a
   * `/payments` call when processing payments with different payment methods.
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum of
   *                                                             64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postOrders(
    idempotencyKey?: string,
    body?: CheckoutCreateOrderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CheckoutCreateOrderResponse>> {
    const req = this.createRequest('POST', '/orders');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(checkoutCreateOrderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(checkoutCreateOrderResponseSchema, requestOptions);
  }

  /**
   * Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in
   * the order, either by canceling or refunding the payment, depending on the type of payment method.
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum of
   *                                                             64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postOrdersCancel(
    idempotencyKey?: string,
    body?: CheckoutCancelOrderRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CheckoutCancelOrderResponse>> {
    const req = this.createRequest('POST', '/orders/cancel');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(checkoutCancelOrderRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(checkoutCancelOrderResponseSchema, requestOptions);
  }

  /**
   * Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a
   * POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod`
   * object.
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum
   *                                                              of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postPaymentMethodsBalance(
    idempotencyKey?: string,
    body?: CheckoutBalanceCheckRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CheckoutBalanceCheckResponse>> {
    const req = this.createRequest('POST', '/paymentMethods/balance');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(checkoutBalanceCheckRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(checkoutBalanceCheckResponseSchema, requestOptions);
  }
}
