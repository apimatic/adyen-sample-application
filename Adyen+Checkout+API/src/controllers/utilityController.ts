/**
 * Adyen Checkout APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ServiceError } from '../errors/serviceError';
import {
  ApplePaySessionResponse,
  applePaySessionResponseSchema,
} from '../models/applePaySessionResponse';
import {
  CheckoutUtilityRequest,
  checkoutUtilityRequestSchema,
} from '../models/checkoutUtilityRequest';
import {
  CheckoutUtilityResponse,
  checkoutUtilityResponseSchema,
} from '../models/checkoutUtilityResponse';
import {
  CreateApplePaySessionRequest,
  createApplePaySessionRequestSchema,
} from '../models/createApplePaySessionRequest';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class UtilityController extends BaseController {
  /**
   * You need to use this endpoint if you have an API-only integration with Apple Pay which uses Adyen's
   * Apple Pay certificate.
   *
   * The endpoint returns the Apple Pay session data which you need to complete the [Apple Pay session
   * validation](https://docs.adyen.com/payment-methods/apple-pay/api-only?tab=adyen-certificate-
   * validation_1#complete-apple-pay-session-validation).
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum
   *                                                               of 64 characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   */
  async postApplePaySessions(
    idempotencyKey?: string,
    body?: CreateApplePaySessionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApplePaySessionResponse>> {
    const req = this.createRequest('POST', '/applePay/sessions');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(createApplePaySessionRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    return req.callAsJson(applePaySessionResponseSchema, requestOptions);
  }

  /**
   * This operation takes the origin domains and returns a JSON object containing the corresponding
   * origin keys for the domains.
   * > If you're still using origin key for your Web Drop-in or Components integration, we recommend
   * [switching to client key](https://docs.adyen.com/development-resources/client-side-
   * authentication/migrate-from-origin-key-to-client-key). This allows you to use a single key for all
   * origins, add or remove origins without generating a new key, and detect the card type from the
   * number entered in your payment form.
   *
   * @param idempotencyKey  A unique identifier for the message with a maximum of 64
   *                                                         characters (we recommend a UUID).
   * @param body
   * @return Response from the API call
   * @deprecated
   */
  async postOriginKeys(
    idempotencyKey?: string,
    body?: CheckoutUtilityRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CheckoutUtilityResponse>> {
    const req = this.createRequest('POST', '/originKeys');
    const mapped = req.prepareArgs({
      idempotencyKey: [idempotencyKey, optional(string())],
      body: [body, optional(checkoutUtilityRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('Idempotency-Key', mapped.idempotencyKey);
    req.json(mapped.body);
    req.deprecated('UtilityController.postOriginKeys');
    req.throwOn(400, ServiceError, 'Bad Request - a problem reading or understanding the request.');
    req.throwOn(401, ServiceError, 'Unauthorized - authentication required.');
    req.throwOn(403, ServiceError, 'Forbidden - insufficient permissions to process the request.');
    req.throwOn(422, ServiceError, 'Unprocessable Entity - a request validation error.');
    req.throwOn(500, ServiceError, 'Internal Server Error - the server could not process the request.');
    return req.callAsJson(checkoutUtilityResponseSchema, requestOptions);
  }
}
