/**
 * Adyen Checkout APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { Address3, address3Schema } from './address3';
import { Card2, card2Schema } from './card2';
import { Name2, name2Schema } from './name2';
import { SubMerchant2, subMerchant2Schema } from './subMerchant2';

/** the person or entity receiving the money */
export interface FundRecipient1 {
  /** The address where to send the invoice. */
  billingAddress?: Address3;
  /** the used paymentMetohd */
  paymentMethod?: Card2;
  /** the email address of the person */
  shopperEmail?: string;
  /** the name of the person */
  shopperName?: Name2;
  /**
   * Required for recurring payments.
   * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.
   * > Your reference must not include personally identifiable information (PII), for example name or email address.
   */
  shopperReference?: string;
  /** This is the `recurringDetailReference` returned in the response when you created the token. */
  storedPaymentMethodId?: string;
  /**
   * Required for Back-to-Back/ purchase driven load in Wallet transactions.
   * Contains the final merchant who will be receiving the money, also known as subMerchant, information.
   */
  subMerchant?: SubMerchant2;
  /** the telephone number of the person */
  telephoneNumber?: string;
  /** indicates where the money is going */
  walletIdentifier?: string;
  /** indicates the tax identifier of the fund recepient */
  walletOwnerTaxId?: string;
}

export const fundRecipient1Schema: Schema<FundRecipient1> = object({
  billingAddress: ['billingAddress', optional(lazy(() => address3Schema))],
  paymentMethod: ['paymentMethod', optional(lazy(() => card2Schema))],
  shopperEmail: ['shopperEmail', optional(string())],
  shopperName: ['shopperName', optional(lazy(() => name2Schema))],
  shopperReference: ['shopperReference', optional(string())],
  storedPaymentMethodId: ['storedPaymentMethodId', optional(string())],
  subMerchant: ['subMerchant', optional(lazy(() => subMerchant2Schema))],
  telephoneNumber: ['telephoneNumber', optional(string())],
  walletIdentifier: ['walletIdentifier', optional(string())],
  walletOwnerTaxId: ['walletOwnerTaxId', optional(string())],
});
